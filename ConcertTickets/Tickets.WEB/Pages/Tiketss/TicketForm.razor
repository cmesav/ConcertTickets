@inject SweetAlertService sweetAlertService

@if (Ticket.Used is true)
{

    <center>
        <h2>El boleto ya ha sido utlizado</h2>
        <h3>Puerta de entrada: @Ticket.Entrance</h3>
        <h3>Fecha y hora: @Ticket.Date</h3>
        <img src="images/brokenticket.jpeg" width="300" />
        <h3> <p>Lo sentimos, el boleto ha sido utilizado por alguien más, si crees que se trata de un error, por favor contacta con logistica</p></h3>
        <a href="/ticketsconsult" class="btn btn-primary">Volver al inicio</a>
    </center>

}
else
{
    <EditForm Model="Ticket" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Datos de la boleta:</label>
            <div>
                <InputSelect style="width: 400px;" class="form-control" @bind-Value="@Ticket.Entrance">
                    <option value="0">-- Seleccione una Porteria --</option>
                    @if (Entrances is not null)

                        @foreach (var entrance in Entrances)
                        {
                            <option value="@entrance">@entrance</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Ticket.Entrance)" />
            </div>
            <div>
                <label>Fecha de la boleta:</label>
                <InputDate style="width: 400px;" Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="@Ticket.Date" />
                <ValidationMessage For="@(() => Ticket.Date)" />
            </div>


        </div>

        <button class="btn btn-primary" type="submit">INGRESAR</button>
        <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
    </EditForm>
}


@code {
    private string? SelectedEntrance { get; set; }

    private List<string> Entrances { get; } = new List<string> { "Norte", "Sur", "Oriental", "Occidental" };


    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Ticket);
    }




    [EditorRequired]
    [Parameter]
    public Ticket Ticket { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }


        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}