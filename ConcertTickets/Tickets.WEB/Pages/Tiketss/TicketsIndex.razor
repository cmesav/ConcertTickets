@page "/tickets"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Listado de Boletas</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Boleta..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>


<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


<GenericList MyList="Tickets">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id Boleta</th>
                    <th >Estado</th>
                    
                    <th >Fecha de ingreso</th>
                   
                    <th>Entrada</th>
                    <th ></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in Tickets!)
                {
                    <tr>
                        <td>
                            @ticket.Id
                        </td>
                        <td>
                            @ticket.Used
                        </td>
                        <td>
                           @if (@ticket.Date == null){
                                <p>N/A</p>
                            }
                            else
                            {
                                @ticket.Date
                            }
                        </td>
                        <td>
                            @if (@ticket.Entrance == null)
                            {
                                <p>N/A</p>
                            }
                            else
                            {
                                @ticket.Entrance
                            }
                        </td>
                        <td>
                            <a href="/tickets/edit/@ticket.Id" class="btn btn-warning">Editar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Ticket>? Tickets { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/tickets?page={page}";
            url2 = $"api/tickets/totalPages";
        }
        else
        {
            url1 = $"api/tickets?page={page}&filter={Filter}";
            url2 = $"api/tickets/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Ticket>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Tickets = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task Delete(Ticket ticket)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/tickets/{ticket.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}
